% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ftp_getBinPars.R
\name{ftp_getBinPars}
\alias{ftp_getBinPars}
\title{ftp_getBinPars}
\usage{
ftp_getBinPars(host = NULL, user = NULL, pwd = NULL, hdir = NULL,
  ldir = NULL)
}
\arguments{
\item{host}{Remote host URL}

\item{user}{User name}

\item{pwd}{Password}

\item{hdir}{Host directory in which to find file(s) to download}

\item{ldir}{Local directory in which to download remote files}
}
\value{
If no errors, a \code{data.table} with a minimum of two fields:

\itemize{
\item \code{remote_url}: The full server path, with embedded credentials required to download
\item \code{local_dest}: The local destination path corresponding to each \emph{remote_url} asset
}

In most cases, additional metadata for each remote asset will also be populated, including:

\itemize{
\item \code{url_sizeMB} The \code{numeric} size in megabytes
\item \code{url_mod_year} The \code{character} last modification year
\item \code{url_mod_date} The \code{character} last modification date, usually month and day
\item \code{url_mod_time} The \code{character} last modification time, usually in 24h-format
}

Additionally (if no errors), each output table will have two attributes:
\itemize{
\item \code{local_basedir} The base directory to download to
\item \code{local_basedir_exists} Does the local base directory exist?
}

... these are a convenient way to determine if the local target directory exists, and if
not, then the attribute \code{local_basedir} can be used to create it via e.g. \code{dir.create}.

If a server error, then the error message printed to console, and:
\itemize{
\item \code{call_params} A \code{list} of the parameters used to query the server
}

If no server error, but all required return data is not detected, then an error message, and:
\itemize{
\item \code{call_params} A \code{list} of the parameters used to query the server
\item \code{call_ret} A nested \code{list} of the return from a call to the server using
      the aforementioned params via \code{\link{ftp_listDir}}
}
}
\description{
Get parameters needed to download one or more remote binary file(s) to a local directory
}
\details{
This function performs three main tasks. First, it verifies if the server can even be queried
with the supplied parameters. Second, it checks whether the required information is available;
this means that \code{\link{ftp_listDir}} must be able to create a table of files, with
successfully parsed-out fields for \code{type_code} and \code{name}. Additionally, at least one
\code{type_code} must have a value of \code{1}, indicating a file, and not a directory. Finally,
if the required criteria are all satisfied, it outputs a \code{data.table} containing the two
required sets of values needed to download the files, \code{remote_url} and \code{local_dest}.
}
\examples{
\dontrun{
## ftp parameter list
ftp_params <- list(
  host = ftp.xyz.com,
  user = "me",
  pwd = "pwd",
  dir = "/dir1/" # leading and trailing slashes will be normalized in-function
)

ftp_getBinPars(
  host = ftp_params$host,
  user = ftp_params$user,
  pwd = ftp_params$pwd,
  hdir = ftp_params$dir,
  ldir = "./local_dir_1/"
)
}
}
\seealso{
\code{\link{curlProgress}} for the function that a successful output is expected
to be used for.

Other ftp_functions: \code{\link{ftp_listDir}},
  \code{\link{ftp_makeParams}}, \code{\link{ftp_parseMeta}}
}
\concept{ftp_functions}
