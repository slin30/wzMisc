% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_ref_unique.R
\name{make_ref_unique}
\alias{make_ref_unique}
\title{Nake a lookup vector consisting of unique elements after applying fun}
\usage{
make_ref_unique(x, dropNA = TRUE, fun, ...)
}
\arguments{
\item{x}{(required) An input atomic vector}

\item{dropNA}{Should \code{NA} be excluded, post-uniquification? Defaults to \code{TRUE}}

\item{fun}{A character vector of length 1, denoting the function to apply to \code{x}}

\item{...}{Additional (ideally named) arguments to pass to \code{fun}, if applicable}
}
\value{
A named vector the length of \code{unique(x)}, or \code{length(unique(x[!is.na(x)]))}
if \code{dropNA==TRUE}. Additionally, a message communicating the reduction in
cardinality. If no reduction in cardinality was detected, i.e. \code{x} was already
entirely unique, then a message stating that this function effectively has no benefit.
}
\description{
For a vector x, apply fun and output result, named by unique x
}
\details{
This is a convenient way to create lookup vectors, that can be used to transform the
original vector via character subscripting, which can be more efficient (in some cases
sigficantly) than applying the transformation on the input directly.
}
\note{
\code{fun} should be passed as an explicitly named argument, i.e. \code{fun="gsub"} due to the
\code{dropNA} order. Furthermore, it may be necessary to also explicitly pass \code{x} in the input
within \code{...} if you wish to call a function (\code{fun}) that does not accept \code{x} as
the first argument, AND where the argument name is something other than \code{x}.
}
\examples{
# an ideal scenario
set.seed(10)
vec_x <- rep(
  replicate(1E4,
            paste0(
              paste(sample(LETTERS[1:4], 3, replace = TRUE), collapse = ""),
              sample(100L:110L, 1)
            )),
  100
)

# using a lookup table to subscript
system.time(
  via_subscript <- make_ref_unique(vec_x, fun = "sub", pattern = "ABC", replacement = "")[vec_x]
)
# versus direct application
system.time(via_direct <- sub(x = vec_x, pattern = "ABC", replacement = ""))

# check
identical(unname(via_subscript), via_direct)
}
