% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/profile_table.R
\name{profile_table}
\alias{profile_table}
\title{High-level column statistics for data.frames}
\usage{
profile_table(tbl, pivot = TRUE)
}
\arguments{
\item{tbl}{A data.frame or data.table.}

\item{pivot}{Output in cross-tabular format if \code{TRUE} (default)}
}
\value{
By default, a data.table with the following fields:

\itemize{
\item field_name: \code{factor}; input field names.
\item CLASS: \code{chr}; the class of the field. If multiple classes, these are
      collapsed with a semicolon delimiter.
\item MAYBE_NUMBER: \code{logi}; does the field contain only numbers, such that even
      upon coercion of non-numeric fields, no \code{NA} values would result?
      Always \code{TRUE} for \code{numeric} (or \code{integer}) fields
\item FRAC_COMPLETE: \code{numeric}; the fraction of rows that are not \code{NA}
\item NCHAR_MAX_LEN: \code{integer}; the maximum character length of the field, after
      coercing to \code{character}.
\item UNIQUEN: \code{integer}; the distinct count of values, excluding \code{NA}
\item INTEGRAL_DUPE_FCTR; \code{integer}; the fraction of duplicate values, only if
      the result of dividing the distinct count of non-\code{NA} values by the
      row count is an integral value. \code{NA} if this is not true, i.e. if the
      modulo of the calculation \code{!= 0}.
}
}
\description{
Calculate pre-determind per-column stats
}
\details{
Useful to check high-level column statistics prior to e.g. creating a table schema.
}
\note{
\code{factor} columns are treated as \code{character} via \code{as.character()}
}
\examples{
set.seed(10)
int_sample <- sample(1:10L, 100, replace = TRUE)
test_df <- data.frame(
  num_col = rnorm(100),
  chr_col = sample(LETTERS, 100, replace = TRUE),
  int_col = int_sample,
  int_as_factor = as.factor(int_sample),
  int_as_chr = as.character(int_sample),
  all_NA_chr = NA_character_,
  posix_ct_t = as.POSIXct(as.Date("2001-01-01")),
  stringsAsFactors = FALSE
)

profile_table(test_df, pivot = TRUE)
}
